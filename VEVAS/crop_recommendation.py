# -*- coding: utf-8 -*-
"""crop_recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AD_TN8-zB57nenqz7lpLMpKUo7qjNjUT
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt
import pandas as pd

data=pd.read_csv("/content/Crop_recommendation.csv")

column=data.columns
column

data.head(10)

data.isnull().sum()

data['label'].unique()

for col in column:
  print(data[col].isnull())

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
# data['label']=le.fit_transform(data['label'])
# df['species']= label_encoder.fit_transform(df['species'])
data['label']=le.fit_transform(data['label'])

data.head()

from sklearn.linear_model import LogisticRegression

x=data[['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']]
y=data['label']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8)

x_train.shape

model=LogisticRegression()
model.fit(x_train,y_train)

model.predict(x_test)

model.score(x_test,y_test)

from sklearn. randomforest import random
model1=SVC()

model1.fit(x_train,y_train)
model1.predict(x_test)

model1.score(x_test,y_test)

from sklearn.neighbors import KNeighborsClassifier
model_ne=KNeighborsClassifier(n_neighbors=7)

da=model_ne.fit(x_train,y_train)

model_ne.score(x_test,y_test)

import matplotlib.pyplot as plt
plt.plot(data['N'],color="red")
plt.plot(data['humidity'])
# plt.plot(data['rainfall'])
plt.legend(['N','Humidity','RainFall'])

pip install gradio

import gradio as gr

def fun(N,P,K,Temperature,Humidity,ph,Rainfall):
  arr=[[N,P,K,Temperature,Humidity,ph,Rainfall]]
  
  return model.predict(arr)

if(val=1):
  print("rice")
elif(val=2):
  print("maize")
elif(val=3):
  print("")
elif(val=4):
  print("")
elif(val=5):
  print("")
elif(val=6):
  print("")
elif(val=7):
  print()

print(fun('90',	'42', '43','20.879744','82.002744','6.502985','202.935536'))

image = gr.inputs.Image(shape=(400,400))

image = gr.inputs.Image(shape=(400,400))
gr.Interface(fn=fun, inputs=['text','text','text','text','text','text','text'], outputs=["text"]).launch(debug=True)

